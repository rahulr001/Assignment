from pydantic import BaseModel
from loguru import logger


# Data model for search requests
class SearchRequest(BaseModel):
    query: str
    session_id: str = None

    def __init__(self, **data):
        super().__init__(**data)
        logger.info(
            f"Initialized SearchRequest with query='{self.query}', session_id='{self.session_id}'"
        )


# ----------- LangGraph Setup -----------


# Data model for conversation state in LangGraph
class ConversationState(BaseModel):
    conversation: list  # List of conversation messages or turns
    query: str = ""  # Current user query
    follow_up_question: str = ""  # Follow-up question generated by the system
    recommendation: str = ""  # Recommendation generated by the system
    recommendation_query: str = ""  # Query used for generating recommendation
    is_follow_up: str = ""  # Flag indicating if the current state is a follow-up
    citations: list = []  # List of citations or references
    ready_for_recommendation: bool = (
        False  # Flag indicating readiness for recommendation
    )

    def __init__(self, **data):
        super().__init__(**data)
        logger.info(
            f"Initialized ConversationState with conversation={self.conversation}, "
            f"query='{self.query}', follow_up_question='{self.follow_up_question}', "
            f"recommendation='{self.recommendation}', recommendation_query='{self.recommendation_query}', "
            f"citations={self.citations}, ready_for_recommendation={self.ready_for_recommendation}"
        )


class ResponseFormat(BaseModel):
    """
    Response format for the search API.
    Contains the response message and any follow-up questions.
    """

    ready_for_recommendation: bool  # The main response message
    optimized_query: str = ""  # Optional follow-up question from the system
